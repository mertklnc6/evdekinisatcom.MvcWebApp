// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using evdekinisatcom.MvcWebApp.DataAccess.Data;

#nullable disable

namespace evdekinisatcom.MvcWebApp.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230923191815_addSeedData")]
    partial class addSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp.DataAccess.Identity.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp.DataAccess.Identity.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("/userImages/defaultProfilePic.webp");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6521),
                            IsDeleted = false,
                            Name = "Elektronik"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6530),
                            IsDeleted = false,
                            Name = "Bilgisayarlar & Tabletler",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6531),
                            IsDeleted = false,
                            Name = "Telefonlar",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6532),
                            IsDeleted = false,
                            Name = "Oyun & Konsollar",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6533),
                            IsDeleted = false,
                            Name = "TV & Ses Sistemleri",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6534),
                            IsDeleted = false,
                            Name = "Kamera & Fotoğraf Makineleri",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6535),
                            IsDeleted = false,
                            Name = "Giyim & Aksesuar"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6536),
                            IsDeleted = false,
                            Name = "Erkek Giyim",
                            ParentCategoryId = 7
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6537),
                            IsDeleted = false,
                            Name = "Kadın Giyim",
                            ParentCategoryId = 7
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6538),
                            IsDeleted = false,
                            Name = "Çocuk Giyim",
                            ParentCategoryId = 7
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6539),
                            IsDeleted = false,
                            Name = "Ayakkabılar",
                            ParentCategoryId = 7
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6540),
                            IsDeleted = false,
                            Name = "Çantalar",
                            ParentCategoryId = 7
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6541),
                            IsDeleted = false,
                            Name = "Ev & Yaşam"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6542),
                            IsDeleted = false,
                            Name = "Mobilya",
                            ParentCategoryId = 13
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6543),
                            IsDeleted = false,
                            Name = "Dekorasyon",
                            ParentCategoryId = 13
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6544),
                            IsDeleted = false,
                            Name = "Ev Aletleri",
                            ParentCategoryId = 13
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6545),
                            IsDeleted = false,
                            Name = "Kitap & Müzik & Film"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6546),
                            IsDeleted = false,
                            Name = "Kitaplar",
                            ParentCategoryId = 17
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6547),
                            IsDeleted = false,
                            Name = "Müzik Albümleri",
                            ParentCategoryId = 17
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6548),
                            IsDeleted = false,
                            Name = "Filmler & Diziler",
                            ParentCategoryId = 17
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6549),
                            IsDeleted = false,
                            Name = "Spor & Outdoor"
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6550),
                            IsDeleted = false,
                            Name = "Spor Giyim",
                            ParentCategoryId = 21
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6551),
                            IsDeleted = false,
                            Name = "Spor Aletleri",
                            ParentCategoryId = 21
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6552),
                            IsDeleted = false,
                            Name = "Kamp & Outdoor",
                            ParentCategoryId = 21
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6553),
                            IsDeleted = false,
                            Name = "Kozmetik & Sağlık"
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6553),
                            IsDeleted = false,
                            Name = "Makyaj",
                            ParentCategoryId = 25
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6554),
                            IsDeleted = false,
                            Name = "Cilt Bakımı",
                            ParentCategoryId = 25
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6555),
                            IsDeleted = false,
                            Name = "Saç Bakımı",
                            ParentCategoryId = 25
                        },
                        new
                        {
                            Id = 29,
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6556),
                            IsDeleted = false,
                            Name = "Parfümler",
                            ParentCategoryId = 25
                        });
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProducId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int?>("AppUserId1")
                        .HasColumnType("int");

                    b.Property<int?>("BuyerId")
                        .HasColumnType("int");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("AppUserId1");

                    b.HasIndex("CartId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Condition = "Yeni & Etiketli",
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6723),
                            Description = "Kutusu Açılmadı",
                            HeaderImageUrl = "~/wwwroot/userUploads/resize.png",
                            IsDeleted = false,
                            Price = 100m,
                            SellerId = 1,
                            Title = "Iphone 15"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Condition = "Az Kullanılmış",
                            CreatedDate = new DateTime(2023, 9, 23, 22, 18, 14, 156, DateTimeKind.Local).AddTicks(6725),
                            Description = "Sıfıra yakın",
                            HeaderImageUrl = "~/wwwroot/userUploads/tel1.jpg",
                            IsDeleted = false,
                            Price = 150m,
                            SellerId = 1,
                            Title = "S23 Plus"
                        });
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.CartItem", b =>
                {
                    b.HasOne("evdekinisatcom.MvcWebApp_App.Entity.Entities.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("evdekinisatcom.MvcWebApp_App.Entity.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.Category", b =>
                {
                    b.HasOne("evdekinisatcom.MvcWebApp_App.Entity.Entities.Category", "ParentCategory")
                        .WithMany("subCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.Comment", b =>
                {
                    b.HasOne("evdekinisatcom.MvcWebApp_App.Entity.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.Order", b =>
                {
                    b.HasOne("evdekinisatcom.MvcWebApp.DataAccess.Identity.Models.AppUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.OrderDetail", b =>
                {
                    b.HasOne("evdekinisatcom.MvcWebApp_App.Entity.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("evdekinisatcom.MvcWebApp_App.Entity.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.Product", b =>
                {
                    b.HasOne("evdekinisatcom.MvcWebApp.DataAccess.Identity.Models.AppUser", null)
                        .WithMany("ProductsToSell")
                        .HasForeignKey("AppUserId");

                    b.HasOne("evdekinisatcom.MvcWebApp.DataAccess.Identity.Models.AppUser", null)
                        .WithMany("PurchasedProducts")
                        .HasForeignKey("AppUserId1");

                    b.HasOne("evdekinisatcom.MvcWebApp_App.Entity.Entities.Cart", null)
                        .WithMany("Products")
                        .HasForeignKey("CartId");

                    b.HasOne("evdekinisatcom.MvcWebApp_App.Entity.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.ProductImage", b =>
                {
                    b.HasOne("evdekinisatcom.MvcWebApp_App.Entity.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp.DataAccess.Identity.Models.AppUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductsToSell");

                    b.Navigation("PurchasedProducts");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.Cart", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("subCategories");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("evdekinisatcom.MvcWebApp_App.Entity.Entities.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
